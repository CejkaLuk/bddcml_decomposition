Multilevel BDDC solver library
==============================

Installation
--------------

1. Create `make.inc` within the main directory from `make.inc.example`.
Make sure that the following necessary external libraries are available:
   - BLOPEX ( http://code.google.com/p/blopex )
   - MUMPS  ( http://graal.ens-lyon.fr/MUMPS )
   - ParMETIS ( http://glaros.dtc.umn.edu/gkhome/metis/parmetis/overview )
   - LAPACK ( http://www.netlib.org/lapack )
   - BLAS ( http://www.netlib.org/blas )
   - **Note**: LAPACK and BLAS are often included in numerical libraries such as [MKL](https://www.intel.com/content/www/us/en/docs/onemkl/get-started-guide/2023-0/overview.html).

2. Run the `make` command which will:
   - compile objects and modules in the `src/` folder,
   - create a library `libbddcml.a` in `lib/` folder, and
   - compile example solvers in `examples/` solver.

For additional info, see
http://www.math.cas.cz/~sistek/software/bddcml.html

In case help is needed, write to Jakub Šístek ( sistek@math.cas.cz ).

The library provides a simple interface callable from Fortran and C. The solution process is
operated by several routines consequently called.

Two different modes are possible for input:
- user can either provide information about global mesh and a file with element matrices, or
- user can provide division into subdomains on the first level and pass
  subdomain matrices for each subdomain to the routine


Benchmarks
--------------

### Poisson Equation on a Cube
The benchmarks involve using scripts to run the `examples/poisson_on_cube` example for different decomposition algorithms on the GPU. The benchmark scripts create many log files
which can later be parsed for the results.

Requirements:
- `tnl_bddcml_interface` - The interface that integrates the [Decomposition project](https://gitlab.com/tnl-project/decomposition) and [TNL](https://gitlab.com/tnl-project/tnl) into BDDCML.

Execution Instructions:
0. Go to `benchmarks/poisson_on_cube/`.
1. Prepare the executable files by running the `prepare_poisson_on_cube_benchmark` script.
   - The script will create multiple `poisson_on_cube` executables in `executables/` for various decomposition and solving implementations.
   - The compilation logs will be available in `compilation_logs/`.
2. Run the benchmark using the `run_poisson_on_cube_benchmark` script.
   - This will create logs in the `log-files` directory.
3. Parse the logs using the `poisson_on_cube_logs_to_csv.py` script:
   ```bash
   python3 poisson_on_cube_logs_to_csv.py -d ./log-files/decomposers/raw -i ".*.log" -o "./log-files"
   ```
   - This script parses the log files in the `log-files` directory and saves the results into `log-files/<benchmark_type>/parsed_results`, where `<benchmark_type>` will be either `decomposers` or `solvers`.
   - For the script usage, execute the following:
      ```bash
      python3 poisson_on_cube_logs_to_csv.py --help
      ```